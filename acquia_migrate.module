<?php

/**
 * @file
 * I wish we did not need this file ðŸ™ˆ.
 */

use Acquia\DrupalEnvironmentDetector\AcquiaDrupalEnvironmentDetector;
use Drupal\acquia_migrate\MigrationAlterer;
use Drupal\acquia_migrate\Recommendations;
use Drupal\acquia_migrate\Plugin\migrate\AcquiaMigrateNodeReference;
use Drupal\acquia_migrate\Plugin\migrate\destination\AcquiaMigrateUser;
use Drupal\acquia_migrate\Plugin\migrate\AcquiaMigrateEntityReference;
use Drupal\acquia_migrate\Plugin\migrate\id_map\SqlWithCentralizedMessageStorage;
use Drupal\acquia_migrate\Form\UserOneConfigurationForm;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Logger\RfcLogLevel;
use Drupal\Core\Url;
use Drupal\Core\Config\Entity\ConfigEntityInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_toolbar().
 */
function acquia_migrate_toolbar() {
  $recommendations = \Drupal::service('acquia_migrate.recommendations');
  assert($recommendations instanceof Recommendations);
  $last_source_update = \DateTime::createFromFormat(\DateTime::RFC3339, $recommendations->getRecentInfoTime());

  $items['acquia_migrate'] = [
    // Set weight to be heavier than the "home" toolbar tab, but lighter than
    // the "administration" toolbar tab. In short, attempt to be the first
    // toolbar tab, to ensure this toolbar tab gets activated by default.
    '#weight' => -19,
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Acquia Migrate'),
      '#url' => Url::fromRoute('acquia_migrate.migrations.dashboard'),
      '#attributes' => [
        'title' => t('Acquia Migrate'),
        'class' => ['toolbar-icon', 'toolbar-icon-acquia-migrate'],
      ],
    ],
    'tray' => [
      '#heading' => t('Acquia Migrate actions'),
      'links' => [
        '#theme' => 'links__toolbar_acquia_migrate',
        '#cache' => [
          'max-age' => 0,
        ],
        '#links' => [
          'migrations-dashboard' => [
            'type' => 'link',
            'title' => t('Migrations'),
            'url' => Url::fromRoute('acquia_migrate.migrations.dashboard'),
            'attributes' => [
              'class' => ['toolbar-icon', 'toolbar-icon-acquia-migrate-dashboard'],
            ],
          ],
          'migration-messages' => [
            'type' => 'link',
            'title' => t('Messages'),
            'url' => Url::fromRoute('acquia_migrate.migrations.messages'),
            'attributes' => [
              'class' => ['toolbar-icon', 'toolbar-icon-acquia-migrate-messages'],
            ],
          ],
          'migration-module-info' => [
            'type' => 'link',
            'title' => t('Modules'),
            'url' => Url::fromRoute('acquia_migrate.migrations.module.info'),
            'attributes' => [
              'class' => ['toolbar-icon', 'toolbar-icon-acquia-migrate-modules'],
            ],
          ],
          'acquia-site-studio' => [
            'type' => 'link',
            'title' => t('Appearance'),
            'url' => Url::fromRoute('acquia_migrate.acquia_site_studio'),
            'attributes' => [
              'class' => ['toolbar-icon', 'toolbar-icon-system-themes-page'],
            ],
          ],
          'last-source-update' => [
            'type' => 'link',
            'title' => $last_source_update === FALSE
              ? t('<em>Source database age: unknown</em>')
              : t('<em>Source database of @time-description (@time-ago ago)</em>', [
                '@time-description' => $last_source_update->format('D M j, G:H'),
                '@time-ago' => \Drupal::service('date.formatter')->formatTimeDiffSince($last_source_update->getTimestamp()),
              ]),
            'url' => Url::fromUri('base:/acquia-migrate-accelerate/migrations/refresh'),
            'attributes' => [
              'class' => ['toolbar-icon'],
            ],
          ],
        ],
        '#attributes' => [
          'class' => ['toolbar-menu'],
        ],
      ],
    ],
    '#attached' => [
      'library' => [
        'acquia_migrate/toolbar'
      ]
    ]
  ];
  return $items;
}

/**
 * Implements hook_migrate_id_map_info_alter().
 */
function acquia_migrate_migrate_id_map_info_alter(array &$definitions) {
  $definitions['sql']['class'] = SqlWithCentralizedMessageStorage::class;
  // @see https://drupal.org/project/smart_sql_idmap
  // @todo Remove when Media Migration does not depend on smart_sql_idmap
  //   anymore (on a Drupal core version that includes
  //   https://drupal.org/i/2845340).
  if (!empty($definitions['smart_sql']['class'])) {
    $definitions['smart_sql']['class'] = SqlWithCentralizedMessageStorage::class;
  }
}

/**
 * Implements hook_migration_plugins_alter().
 */
function acquia_migrate_migration_plugins_alter(array &$migrations) {
  $migration_alterer = \Drupal::service('acquia_migrate.migration_alterer');
  // @codingStandardsIgnoreStart
  // Coding standards can be re-enabled for this next line once
  // https://github.com/acquia/coding-standards-php/pull/8 is merged.
  assert($migration_alterer instanceof MigrationAlterer);
  // @codingStandardsIgnoreEnd
  $migration_alterer->addDependenciesFromFieldPlugins($migrations);
  $migration_alterer->refineMigrationsLabels($migrations);
  $migration_alterer->convertToRollbackableConfig($migrations);
  $migration_alterer->convertToRollbackableEntityDisplay($migrations);
  $migration_alterer->refineMediaEntityMigrations($migrations);
  $migration_alterer->addDiscoveredTaxonomyDependencies($migrations);
  $migration_alterer->addFieldTypePluginChecker($migrations);
  $migration_alterer->omitFieldMigrationsForMissingEntityTypes($migrations);
  $migration_alterer->refineViewModeDependencies($migrations);
  $migration_alterer->refineEntityBundleMigrationDependencies($migrations);
  $migration_alterer->removeFollowupMigrations($migrations);

  // Enable change tracking on migration plugins so that they can be re-imported
  // without rolling them back (a.k.a. "refreshed").
  $migration_alterer->addChangeTracking($migrations);
  // Enable caching on migration plugins to improve performance.
  $migration_alterer->addCachingToSqlBasedMigrationPlugins($migrations);
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function acquia_migrate_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'user') {
    // @see \Drupal\acquia_migrate\Plugin\migrate\destination\AcquiaMigrateUser::import()
    $fields['name']->addConstraint('UserOnePetrified');
    $fields['mail']->addConstraint('UserOnePetrified');
    $fields['init']->addConstraint('UserOnePetrified');
    $fields['pass']->addConstraint('UserOnePetrified');
  }
  return $fields;
}

/**
 * Implements hook_migrate_destination_info_alter().
 */
function acquia_migrate_migrate_destination_info_alter(&$definitions) {
  if (!empty($definitions['entity:user'])) {
    $definitions['entity:user']['class'] = AcquiaMigrateUser::class;
  }
}

/**
 * Implements hook_migrate_field_info_alter().
 */
function acquia_migrate_migrate_field_info_alter(&$definitions) {
  // The original "entityreference" and "node_reference" field migration plugins
  // migrate the same target entity IDs what is in the source field value.
  //
  // These plugins are replaced with enhanced ones whose value process pipeline
  // is able to return the final target entity ID (for entity reference fields
  // with 'node' target).
  // (Note that this only affects "node" targets because only nodes have follow-up
  // migrations in Drupal core. In theory other entity types might need this too, but
  // in Drupal core this is the only known case.)
  //
  // So the currently known "d*_entity_reference_translation" migrations are
  // largely replaced by:
  // - Improved (node) entity reference migration plugins, which are migrating
  //   the final target entity ID instead of updating the raw IDs later with the
  //   entity reference translation follow-up migrations.
  // - An alternate migration_lookup plugin, which is able to create stubs in
  //   the right migration derivative's destination plugin; with the help of the
  //   "acquia_migrate_migration_lookup" migration process plugin.
  //  - A new migrate stub service for "acquia_migrate_migration_lookup".
  //
  // @see \Drupal\acquia_migrate\MigrationAlterer::removeEntityReferenceTranslationMigrations()
  if (!empty($definitions['entityreference'])) {
    $definitions['entityreference']['class'] = AcquiaMigrateEntityReference::class;
  }
  if (!empty($definitions['node_reference'])) {
    $definitions['node_reference']['class'] = AcquiaMigrateNodeReference::class;
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * @see \Drupal\acquia_migrate\Form\UserOneConfigurationForm::OPERATION
 */
function acquia_migrate_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['user']->setFormClass(UserOneConfigurationForm::OPERATION, UserOneConfigurationForm::class);
}

/**
 * Implements hook_entity_field_access()
 *
 * @see acquia_migrate_install()
 * @see \Drupal\acquia_migrate\Form\UserOneConfigurationForm::reset()
 * @see \Drupal\acquia_migrate\Form\UserOneConfigurationForm::submitForm()
 */
function acquia_migrate_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if ($items && $operation == 'edit' && $account->isAnonymous() && $items->getEntity()->getEntityTypeId() === 'user' && (int) $items->getEntity()->id() === 1) {
    return AccessResult::allowedIf(!UserOneConfigurationForm::hasBeenConfigured() && in_array($field_definition->getName(), UserOneConfigurationForm::ALLOWED_FIELDS))
      ->setCacheMaxAge(0);
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_modules_installed().
 */
function acquia_migrate_modules_installed($modules, $is_syncing) {
  $timestamp = \Drupal::time()->getRequestTime();
  foreach ($modules as $module) {
    // @see \Drupal\acquia_migrate\Commands\AcquiaMigrateCommands::auditModules()
    $key = "module_install_timestamp:$module";
    \Drupal::keyValue('acquia_migrate')->set($key, $timestamp);
  }

  // Hide the Acquia Connector sign-up message if on Acquia Cloud.
  // @see acquia_connector_show_free_tier_promo()
  // @see acquia_migrate_install()
  if (!$is_syncing && AcquiaDrupalEnvironmentDetector::isAhEnv() && in_array('acquia_connector', $modules, TRUE)) {
    \Drupal::configFactory()
      ->getEditable('acquia_connector.settings')
      ->set('hide_signup_messages', 1)
      ->save();
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function acquia_migrate_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'cron':
      // The source data AM:A migrates might have broken configurations: for
      // example, in the Drupal 7 source database fixture, the article node's
      // are referencing  each other while the corresponding field formatter is
      // set to  "rendered entity" (with default view mode). This means that
      // Drupal runs into an "infinite" loop when these nodes are rendered.
      //
      // The described case does not cause until one tries to view the migrated
      // entity, but for example, cron can easily trigger a render when the
      // "search" module is enabled â€“ and that will break AM:A.
      //
      // So the safest solution is to temporarily disable every cron
      // implementation while AM:A is enabled â€“ except of "system" and "update".
      $allowed_crons = [
        'system',
        'update',
      ];

      // Only allow "system" and "update" crons while Acquia Migrate is enabled.
      $skipped_crons_implementations = array_diff(array_keys($implementations), $allowed_crons);
      if (!empty($skipped_crons_implementations)) {
        $implementations = array_intersect_key($implementations, array_flip($allowed_crons));
        \Drupal::logger('acquia_migrate')->log(RfcLogLevel::DEBUG, 'hook_cron() implementations were skipped because Acquia Migrate Accelerate is enabled. The affected modules are: @module-list.', [
          '@module-list' => implode(',', $skipped_crons_implementations),
        ]);
      }

    case 'migration_plugins_alter':
      // Make Acquia Migrate Accelerator's migration plugin alter hook
      // implementation called as the very last implementation.
      if (array_key_exists('acquia_migrate', $implementations)) {
        $acquia_migrate_implementation = $implementations['acquia_migrate'];
        unset($implementations['acquia_migrate']);
        $implementations['acquia_migrate'] = $acquia_migrate_implementation;
      }
  }
}

/**
 * Implements hook_form_alter().
 *
 * @see \Drupal\acquia_migrate\Form\UserOneConfigurationForm::KEY_ADDITIONAL__SOURCE_SITE_BASE_URL
 * @see _acquia_migrate_entity_form_submit()
 */
function acquia_migrate_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->getFormObject() instanceof EntityFormInterface) {
    $affected_entity = $form_state->getFormObject()->getEntity();

    // Allow all config entities to be edited.
    // @todo Refine this to not allow editing *some* migrated config entities, or if doing so, require dependent migrations to be rolled back and re-imported.
    if ($affected_entity instanceof ConfigEntityInterface) {
      return;
    }

    // Allow the first user to be edited.
    // @see \Drupal\acquia_migrate\Plugin\migrate\destination\AcquiaMigrateUser
    if ($affected_entity->getEntityTypeId() === 'user' && $affected_entity->id() == 1) {
      return;
    }

    // Delete all actions other than the 'submit' action.
    foreach (Element::children($form['actions']) as $key) {
      if ($key !== 'submit') {
        unset($form['actions'][$key]);
      }
    }

    // Change the 'submit' action's label and submit handlers: instead of saving
    // the entity, we will only validate it and show a message.
    // @see _acquia_migrate_entity_form_submit()
    $form['actions']['submit']['#value'] = t('Validate');
    $form['actions']['submit']['#submit'] = ['_acquia_migrate_entity_form_submit'];
    $form['actions']['submit']['#access'] = TRUE;

    // If the source site base URL is known, generate an "edit on source site"
    // button. Also generate a message informing the user of this.
    $base_url = \Drupal::keyValue('acquia_migrate')->get(UserOneConfigurationForm::KEY_ADDITIONAL__SOURCE_SITE_BASE_URL);
    if (!$affected_entity->isNew()) {
      if ($base_url !== NULL) {
        $path = \Drupal::request()->getPathInfo();
        $url = Url::fromUri($base_url . $path);
        $form['actions']['edit_on_source_site'] = [
          '#type' => 'link',
          '#title' => t('Edit on source site'),
          '#access' => TRUE,
          '#attributes' => [
            'class' => ['button', 'button--danger'],
            'target' => '_blank',
          ],
          '#url' => $url,
          '#weight' => 100,
        ];

        \Drupal::messenger()->addWarning(t('Changes can be validated but will not be saved while <em>Acquia Migrate Accelerate</em> is installed. <a href=":url" target="_blank">Change this @entity-type-label on the source site instead.</a>', [
          '@entity-type-label' => $affected_entity->getEntityType()
            ->getSingularLabel(),
          ':url' => $url->toString(TRUE)->getGeneratedUrl(),
        ]));
      }
      else {
        \Drupal::messenger()->addWarning(t('Changes you make will not be saved. Please make the changes on the source site directly.'));
      }
    }
    else {
      // Only show a message on routes where the affected entity can be created.
      // This avoids showing the message for e.g. the "add comment" form that
      // may be rendered adjacent to a viewed entity.
      // @see \Drupal\Core\Entity\Enhancer\EntityRouteEnhancer
      $entity_form = \Drupal::routeMatch()->getRouteObject()->getDefault('_entity_form');
      if ($entity_form !== NULL && ([$entity_type_id, ] = explode('.', $entity_form)) && $entity_type_id == $affected_entity->getEntityTypeId()) {
        if ($base_url !== NULL) {
          $path = \Drupal::request()->getPathInfo();
          $url = Url::fromUri($base_url . $path);
          \Drupal::messenger()->addWarning(t('Creating new @entity-type-labels is not allowed while <em>Acquia Migrate Accelerate</em> is installed. <a href=":url" target="_blank">Create them on the source site instead.</a>', [
            '@entity-type-labels' => $affected_entity->getEntityType()
              ->getPluralLabel(),
            ':url' => $url->toString(TRUE)->getGeneratedUrl(),
          ]));
        }
        else {
          \Drupal::messenger()->addWarning(t('Creating new @entity-type-labels is not allowed while <em>Acquia Migrate Accelerate</em> is installed. Create them on the source site instead.', [
            '@entity-type-labels' => $affected_entity->getEntityType()
              ->getPluralLabel(),
          ]));
        }
      }
    }
  }
}


/**
 * Submit callback for entity form.
 *
 * @see acquia_migrate_form_alter()
 */
function _acquia_migrate_entity_form_submit(array $form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  assert($entity instanceof \Drupal\Core\Entity\EntityInterface);
  $form_state->setRebuild(TRUE);

  if ($entity->isNew()) {
    \Drupal::messenger()
      ->addStatus(t('Validated new @entity-type-label: no validation errors. It was not saved.', [
        '@entity-type-label' => $entity->getEntityType()->getSingularLabel(),
      ]));
  }
  else {
    \Drupal::messenger()
      ->addStatus(t('Validated @entity-type-label: no validation errors. Your changes were not saved.', [
        '@entity-type-label' => $entity->getEntityType()->getSingularLabel(),
      ]));
  }
}
