<?php

/**
 * @file
 * I wish we did not need this file ðŸ™ˆ.
 */

use Drupal\acquia_migrate\MigrationAlterer;
use Drupal\acquia_migrate\Plugin\migrate\destination\AcquiaMigrateUser;
use Drupal\acquia_migrate\Plugin\migrate\id_map\SqlWithCentralizedMessageStorage;
use Drupal\acquia_migrate\Form\UserOneConfigurationForm;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_toolbar().
 */
function acquia_migrate_toolbar() {
  $items['acquia_migrate'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Acquia Migrate'),
      '#url' => Url::fromRoute('acquia_migrate.migrations.dashboard'),
      '#attributes' => [
        'title' => t('Acquia Migrate'),
        'class' => ['toolbar-icon', 'toolbar-icon-acquia-migrate'],
      ],
    ],
    'tray' => [
      '#heading' => t('Acquia Migrate actions'),
      'links' => [
        '#theme' => 'links__toolbar_acquia_migrate',
        '#links' => [
          'migrations-dashboard' => [
            'type' => 'link',
            'title' => t('Migrations'),
            'url' => Url::fromRoute('acquia_migrate.migrations.dashboard'),
            'attributes' => [
              'class' => ['toolbar-icon', 'toolbar-icon-acquia-migrate-dashboard'],
            ],
          ],
          'migration-messages' => [
            'type' => 'link',
            'title' => t('Messages'),
            'url' => Url::fromRoute('acquia_migrate.migrations.messages'),
            'attributes' => [
              'class' => ['toolbar-icon', 'toolbar-icon-acquia-migrate-messages'],
            ],
          ],
          'migration-module-info' => [
            'type' => 'link',
            'title' => t('Modules'),
            'url' => Url::fromRoute('acquia_migrate.migrations.module.info'),
            'attributes' => [
              'class' => ['toolbar-icon', 'toolbar-icon-acquia-migrate-modules'],
            ],
          ],
          'acquia-site-studio' => [
            'type' => 'link',
            'title' => t('Appearance'),
            'url' => Url::fromRoute('acquia_migrate.acquia_site_studio'),
            'attributes' => [
              'class' => ['toolbar-icon', 'toolbar-icon-system-themes-page'],
            ],
          ],
        ],
        '#attributes' => [
          'class' => ['toolbar-menu'],
        ],
      ],
    ],
    '#attached' => [
      'library' => [
        'acquia_migrate/toolbar'
      ]
    ]
  ];
  return $items;
}

/**
 * Implements hook_migrate_id_map_info_alter().
 */
function acquia_migrate_migrate_id_map_info_alter(array &$definitions) {
  $definitions['sql']['class'] = SqlWithCentralizedMessageStorage::class;
}

/**
 * Implements hook_migration_plugins_alter().
 */
function acquia_migrate_migration_plugins_alter(array &$migrations) {
  $migration_alterer = \Drupal::service('acquia_migrate.migration_alterer');
  // @codingStandardsIgnoreStart
  // Coding standards can be re-enabled for this next line once
  // https://github.com/acquia/coding-standards-php/pull/8 is merged.
  assert($migration_alterer instanceof MigrationAlterer);
  // @codingStandardsIgnoreEnd
  $migration_alterer->addDependenciesFromFieldPlugins($migrations);
  $migration_alterer->refineMigrationsLabels($migrations);
  $migration_alterer->convertToRollbackableConfig($migrations);
  $migration_alterer->convertToRollbackableEntityDisplay($migrations);
  $migration_alterer->refineMediaEntityMigrations($migrations);
  $migration_alterer->addDiscoveredTaxonomyDependencies($migrations);
  $migration_alterer->addFieldTypePluginChecker($migrations);
  $migration_alterer->omitFieldMigrationsForMissingEntityTypes($migrations);
  $migration_alterer->refineViewModeDependencies($migrations);

  // Enable change tracking on migration plugins so that they can be re-imported
  // without rolling them back (a.k.a. "refreshed").
  $migration_alterer->addChangeTracking($migrations);
  // Enable caching on migration plugins to improve performance.
  $migration_alterer->addCachingToSqlBasedMigrationPlugins($migrations);
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function acquia_migrate_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'user') {
    // @see \Drupal\acquia_migrate\Plugin\migrate\destination\AcquiaMigrateUser::import()
    $fields['name']->addConstraint('UserOnePetrified');
    $fields['mail']->addConstraint('UserOnePetrified');
    $fields['init']->addConstraint('UserOnePetrified');
    $fields['pass']->addConstraint('UserOnePetrified');
  }
  return $fields;
}

/**
 * Implements hook_migrate_destination_info_alter().
 */
function acquia_migrate_migrate_destination_info_alter(&$definitions) {
  if (!empty($definitions['entity:user'])) {
    $definitions['entity:user']['class'] = AcquiaMigrateUser::class;
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * @see \Drupal\acquia_migrate\Form\UserOneConfigurationForm::OPERATION
 */
function acquia_migrate_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['user']->setFormClass(UserOneConfigurationForm::OPERATION, UserOneConfigurationForm::class);
}

/**
 * Implements hook_entity_field_access()
 *
 * @see acquia_migrate_install()
 * @see \Drupal\acquia_migrate\Form\UserOneConfigurationForm::reset()
 * @see \Drupal\acquia_migrate\Form\UserOneConfigurationForm::submitForm()
 */
function acquia_migrate_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if ($items && $operation == 'edit' && $account->isAnonymous() && $items->getEntity()->getEntityTypeId() === 'user' && (int) $items->getEntity()->id() === 1) {
    return AccessResult::allowedIf(!UserOneConfigurationForm::hasBeenConfigured() && in_array($field_definition->getName(), UserOneConfigurationForm::ALLOWED_FIELDS))
      ->setCacheMaxAge(0);
  }
  return AccessResult::neutral();
}
