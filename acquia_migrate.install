<?php

/**
 * @file
 * Install, update, and uninstall functions for the Acquia Migrate module.
 */

use Drupal\acquia_migrate\MigrationFingerprinter;
use Drupal\acquia_migrate\Recommendations;
use Drupal\acquia_migrate\Plugin\migrate\destination\RollbackableInterface;
use Drupal\acquia_migrate\Form\PublicAcknowledgementForm;
use Drupal\acquia_migrate\Form\UserOneConfigurationForm;
use Drupal\acquia_migrate\Plugin\migrate\id_map\SqlWithCentralizedMessageStorage;
use Drupal\Core\Config\Config;

/**
 * Implements hook_install().
 */
function acquia_migrate_install($is_syncing) {
  if ($is_syncing) {
    return;
  }

  // Set AM:A's "Get started" page as the front page. Anonymous users will see
  // this too.
  $config = \Drupal::service('config.factory')->getEditable('system.site');
  assert($config instanceof Config);
  $config->set('page.front', '/acquia-migrate-accelerate/get-started');
  $config->save();

  // Grant anonymous users the permission to view the administration theme,
  // since the "Get started" page will use that theme.
  $role = \Drupal\user\Entity\Role::load(\Drupal\user\RoleInterface::ANONYMOUS_ID);
  $role->grantPermission('view the administration theme');
  $role->trustData()->save();

  // @see \Drupal\acquia_migrate\Theme\ThemeNegotiator
  \Drupal::service('theme_installer')->install(['claro']);

  // Also set Claro as the default admin theme.
  \Drupal::configFactory()->getEditable('system.theme')
    ->set('admin', 'claro')
    ->save();

  // Avoid sending e-mails. Modules that add more mail interfaces should
  // behave gracefully, like webform does.
  // @see \Drupal\webform\WebformEmailProvider::check()
  $mail_config = \Drupal::configFactory()->getEditable('system.mail');
  $mail_plugins = $mail_config->get('interface');
  foreach (array_keys($mail_plugins) as $interface_name) {
    $mail_plugins[$interface_name] = 'terrible_mail_man';
  }
  $mail_config->set('interface', $mail_plugins)->save();

  UserOneConfigurationForm::reset();
  PublicAcknowledgementForm::reset();

  // Hide the Acquia Connector sign-up message if on Acquia Cloud.
  // @see acquia_connector_show_free_tier_promo()
  // @see acquia_migrate_modules_installed()
  if (\Drupal::moduleHandler()->moduleExists('acquia_connector')) {
    \Drupal::configFactory()
      ->getEditable('acquia_connector.settings')
      ->set('hide_signup_messages', 1)
      ->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function acquia_migrate_uninstall($is_syncing) {
  // Drop all AM:A tables that are not defined in hook_schema() and hence not
  // automatically created and dropped.
  // @see acquia_migrate_schema()
  \Drupal::database()->schema()->dropTable(SqlWithCentralizedMessageStorage::CENTRALIZED_MESSAGE_TABLE);

  // Delete all state.
  \Drupal::state()->deleteMultiple([
    Recommendations::KEY_INITIAL_INFO,
    MigrationFingerprinter::KEY_LAST_FINGERPRINT_CANARY_TIME,
    MigrationFingerprinter::KEY_LAST_FINGERPRINT_COMPUTE_TIME,
  ]);

  if ($is_syncing) {
    return;
  }

  // If the front page is still AM:A's "Get started" page, revert back to Drupal
  // core's default.
  $config = \Drupal::service('config.factory')->getEditable('system.site');
  assert($config instanceof Config);
  if ($config->get('page.front') === '/acquia-migrate-accelerate/get-started') {
    $config->set('page.front', '/user/login');
    $config->save();
  }

  // Also revoke the permission for anonymous users to view the administration
  // theme.
  $role = \Drupal\user\Entity\Role::load(\Drupal\user\RoleInterface::ANONYMOUS_ID);
  $role->revokePermission('view the administration theme');
  $role->trustData()->save();

  // Revert back to the default of showing the Acquia Connector sign-up message.
  // @see acquia_connector_show_free_tier_promo()
  // @see acquia_migrate_install()
  // @see acquia_migrate_modules_installed()
  if (\Drupal::moduleHandler()->moduleExists('acquia_connector')) {
    \Drupal::configFactory()
      ->getEditable('acquia_connector.settings')
      ->set('hide_signup_messages', 0)
      ->save();
  }

  // Warn the site owner to also uninstall other modules.
  \Drupal::messenger()->addWarning(t('You probably also want to uninstall the <code>migrate</code>, <code>migrate_drupal</code>, <code>migrate_drupal_ui</code>, <code>migrate_plus</code>, <code>decoupled_pages</code>, <code>media_migration</code> and <code>webform_migrate</code> modules!'));
}

/**
 * Implements hook_schema().
 */
function acquia_migrate_schema() {
  $schema['acquia_migrate_migration_flags'] = [
    'description' => 'Stores the "completed" and "skipped" flags for migrations.',
    'fields' => [
      'migration_id' => [
        'type' => 'varchar_ascii',
        'length' => 192,
        'not null' => TRUE,
        'description' => 'A migration ID, see MigrationRepository.',
      ],
      'preselection' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
      ],
      'completed' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'tiny',
      ],
      'skipped' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'tiny',
      ],
      'last_computed_fingerprint' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => MigrationFingerprinter::FINGERPRINT_NOT_COMPUTED,
        'description' => 'Last computed fingerprint.',
      ],
      'last_import_fingerprint' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => MigrationFingerprinter::FINGERPRINT_NOT_COMPUTED,
        'description' => 'Last import fingerprint.',
      ],
      'last_import_timestamp' => [
        'type' => 'int',
        'description' => 'Last import start date + time.',
      ],
      'last_import_duration' => [
        'type' => 'int',
        'description' => 'Last import duration (if finished).',
      ],
    ],
    'indexes' => [],
    'primary key' => ['migration_id'],
  ];

  $schema[RollbackableInterface::ROLLBACK_DATA_TABLE] = [
    'description' => 'Stores the previous config values for migration rollback',
    'fields' => [
      RollbackableInterface::ROLLBACK_MIGRATION_PLUGIN_ID_COL => [
        'type' => 'varchar_ascii',
        'length' => 192,
        'not null' => TRUE,
        'description' => 'The ID of the migration plugin',
      ],
      RollbackableInterface::ROLLBACK_CONFIG_ID_COL => [
        'type' => 'varchar_ascii',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The ID of the configuration',
      ],
      RollbackableInterface::ROLLBACK_CONFIG_LANGCODE_COL => [
        'type' => 'varchar_ascii',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language code for this data item.',
      ],
      RollbackableInterface::ROLLBACK_DISPLAY_FIELD_NAME_COL => [
        'type' => 'varchar_ascii',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The name of the field',
      ],
      RollbackableInterface::ROLLBACK_DATA_COL => [
        'type' => 'blob',
        'size' => 'big',
        'description' => 'The previous state of the changed configuration values',
      ],
    ],
    'indexes' => [],
    'primary key' => [
      RollbackableInterface::ROLLBACK_MIGRATION_PLUGIN_ID_COL,
      RollbackableInterface::ROLLBACK_CONFIG_ID_COL,
      RollbackableInterface::ROLLBACK_CONFIG_LANGCODE_COL,
      RollbackableInterface::ROLLBACK_DISPLAY_FIELD_NAME_COL,
    ],
  ];

  $schema[RollbackableInterface::ROLLBACK_STATE_TABLE] = [
    'description' => 'Stores those configuration IDs that where created by a rollbackable migration',
    'fields' => [
      RollbackableInterface::ROLLBACK_CONFIG_ID_COL => [
        'type' => 'varchar_ascii',
        'length' => 192,
        'not null' => TRUE,
        'description' => 'The ID of the configuration',
      ],
      RollbackableInterface::ROLLBACK_CONFIG_LANGCODE_COL => [
        'type' => 'varchar_ascii',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language code of the configuration',
      ],
    ],
    'indexes' => [],
    'primary key' => [
      RollbackableInterface::ROLLBACK_CONFIG_ID_COL,
      RollbackableInterface::ROLLBACK_CONFIG_LANGCODE_COL,
    ],
  ];

  return $schema;
}

/**
 * Implements hook_update_N().
 *
 * Adds migration fingerprint columns to the migration flags table.
 */
function acquia_migrate_update_9100() {
  $fingerprint_schemas = [
    'last_computed_fingerprint' => [
      'type' => 'varchar_ascii',
      'length' => 64,
      'not null' => TRUE,
      'default' => MigrationFingerprinter::FINGERPRINT_NOT_COMPUTED,
      'description' => 'Last computed fingerprint.',
    ],
    'last_import_fingerprint' => [
      'type' => 'varchar_ascii',
      'length' => 64,
      'not null' => TRUE,
      'default' => MigrationFingerprinter::FINGERPRINT_NOT_COMPUTED,
      'description' => 'Last import fingerprint.',
    ],
  ];

  /* @var \Drupal\Core\Database\Schema $spec */
  $schema = \Drupal\Core\Database\Database::getConnection()->schema();

  foreach ($fingerprint_schemas as $field_name => $spec) {
    $schema->addField('acquia_migrate_migration_flags', $field_name, $spec);
  }
}

/**
 * Rollback support is now computed at construction time and hence cached.
 *
 * @see \Drupal\acquia_migrate\Migration::__construct()
 * @see \Drupal\acquia_migrate\MigrationRepository::getMigrations
 */
function acquia_migrate_update_9101() {
}
