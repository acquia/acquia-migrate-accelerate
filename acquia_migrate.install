<?php

/**
 * @file
 * Install, update, and uninstall functions for the Acquia Migrate module.
 */

use Drupal\acquia_migrate\Form\PublicAcknowledgementForm;
use Drupal\acquia_migrate\Form\UserOneConfigurationForm;
use Drupal\acquia_migrate\MigrationFingerprinter;
use Drupal\acquia_migrate\Plugin\migrate\id_map\SqlWithCentralizedMessageStorage;
use Drupal\acquia_migrate\Recommendations;
use Drupal\Core\Config\Config;
use Drupal\Core\Database\Database;
use Drupal\Core\Extension\MissingDependencyException;
use Drupal\Core\Extension\ModuleInstallerInterface;
use Drupal\Core\Utility\UpdateException;
use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;

/**
 * Implements hook_install().
 */
function acquia_migrate_install($is_syncing) {
  if ($is_syncing) {
    return;
  }

  // Set AM:A's "Get started" page as the front page. Anonymous users will see
  // this too.
  $config = \Drupal::service('config.factory')->getEditable('system.site');
  assert($config instanceof Config);
  $config->set('page.front', '/acquia-migrate-accelerate/get-started');
  $config->save();

  // Grant anonymous users the permission to view the administration theme,
  // since the "Get started" page will use that theme.
  $role = Role::load(RoleInterface::ANONYMOUS_ID);
  $role->grantPermission('view the administration theme');
  $role->trustData()->save();

  // @see \Drupal\acquia_migrate\Theme\ThemeNegotiator
  \Drupal::service('theme_installer')->install(['claro']);

  // Also set Claro as the default admin theme.
  \Drupal::configFactory()->getEditable('system.theme')
    ->set('admin', 'claro')
    ->save();

  UserOneConfigurationForm::reset();
  PublicAcknowledgementForm::reset();

  // Hide the Acquia Connector sign-up message if on Acquia Cloud.
  // @see acquia_connector_show_free_tier_promo()
  // @see acquia_migrate_modules_installed()
  if (\Drupal::moduleHandler()->moduleExists('acquia_connector')) {
    \Drupal::configFactory()
      ->getEditable('acquia_connector.settings')
      ->set('hide_signup_messages', 1)
      ->save();
  }

  // Install "migmag_process" if paragraphs is installed.
  $module_handler = \Drupal::moduleHandler();
  if ($module_handler->moduleExists('paragraphs')) {
    $module_list = \Drupal::service('extension.list.module')->getList();
    if (!in_array('migmag_process', array_keys($module_list), TRUE)) {
      throw new MissingDependencyException(
        'Migrate Magician Process Plugins (migmag_process) module is required if Paragraphs is installed. Make sure the module is available and try again.'
      );
    }

    if (!$module_handler->moduleExists('migmag_process')) {
      $module_installer = \Drupal::service('module_installer');
      assert($module_installer instanceof ModuleInstallerInterface);
      $module_installer->install(['migmag_process'], TRUE);
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function acquia_migrate_uninstall($is_syncing) {
  // Drop all AM:A tables that are not defined in hook_schema() and hence not
  // automatically created and dropped.
  // @see acquia_migrate_schema()
  \Drupal::database()->schema()->dropTable(SqlWithCentralizedMessageStorage::CENTRALIZED_MESSAGE_TABLE);

  // Delete all state.
  \Drupal::state()->deleteMultiple([
    Recommendations::KEY_INITIAL_INFO,
    MigrationFingerprinter::KEY_LAST_FINGERPRINT_CANARY_TIME,
    MigrationFingerprinter::KEY_LAST_FINGERPRINT_COMPUTE_TIME,
  ]);

  // Un-MacGyver.
  // @see \Drupal\acquia_migrate\MacGyver
  \Drupal::state()->deleteMultiple([
    'migrate.fallback_state_key',
    'acquia_migrate.ah.database_copy_time',
    'acquia_migrate.ah.copy_start',
  ]);
  \Drupal::keyValue('acquia_migrate')->deleteMultiple([
    'acquia_migrate.ah.current_copy_version',
    'acquia_migrate.ah.database_copied',
    'acquia_migrate.ah.database_copy_to_delete',
    'acquia_migrate.ah.interrupted_database_copy_to_delete',
  ]);

  if ($is_syncing) {
    return;
  }

  // If the front page is still AM:A's "Get started" page, revert back to Drupal
  // core's default.
  $config = \Drupal::service('config.factory')->getEditable('system.site');
  assert($config instanceof Config);
  if ($config->get('page.front') === '/acquia-migrate-accelerate/get-started') {
    $config->set('page.front', '/user/login');
    $config->save();
  }

  // Check if the current default mail interface is still terrible_mail_man,
  // and if so, revert it back to the original of php_mail.
  $mail_config = \Drupal::configFactory()->getEditable('system.mail');
  $mail_plugins = $mail_config->get('interface');
  foreach ($mail_plugins as $interface_key => $interface_name) {
    if ($interface_name === 'terrible_mail_man') {
      $mail_plugins[$interface_key] = 'php_mail';
    }
  }
  $mail_config->set('interface', $mail_plugins)->save();

  // Also revoke the permission for anonymous users to view the administration
  // theme.
  $role = Role::load(RoleInterface::ANONYMOUS_ID);
  $role->revokePermission('view the administration theme');
  $role->trustData()->save();

  // Revert back to the default of showing the Acquia Connector sign-up message.
  // @see acquia_connector_show_free_tier_promo()
  // @see acquia_migrate_install()
  // @see acquia_migrate_modules_installed()
  if (\Drupal::moduleHandler()->moduleExists('acquia_connector')) {
    \Drupal::configFactory()
      ->getEditable('acquia_connector.settings')
      ->set('hide_signup_messages', 0)
      ->save();
  }

  // Warn the site owner to also uninstall other modules.
  \Drupal::messenger()->addWarning(t('You probably also want to uninstall the <code>migrate</code>, <code>migrate_drupal</code>, <code>migrate_drupal_ui</code>, <code>migrate_plus</code>, <code>decoupled_pages</code>, <code>media_migration</code> and <code>webform_migrate</code> modules!'));
}

/**
 * Implements hook_schema().
 */
function acquia_migrate_schema() {
  $schema['acquia_migrate_migration_flags'] = [
    'description' => 'Stores the "completed" and "skipped" flags for migrations.',
    'fields' => [
      'migration_id' => [
        'type' => 'varchar',
        'length' => 192,
        'not null' => TRUE,
        'description' => 'A migration ID, see MigrationRepository.',
      ],
      'preselection' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
      ],
      'completed' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'tiny',
      ],
      'skipped' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'tiny',
      ],
      'last_computed_fingerprint' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => MigrationFingerprinter::FINGERPRINT_NOT_COMPUTED,
        'description' => 'Last computed fingerprint.',
      ],
      'last_import_fingerprint' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => MigrationFingerprinter::FINGERPRINT_NOT_COMPUTED,
        'description' => 'Last import fingerprint.',
      ],
      'last_import_timestamp' => [
        'type' => 'int',
        'description' => 'Last import start date + time.',
      ],
      'last_import_duration' => [
        'type' => 'int',
        'description' => 'Last import duration (if finished).',
      ],
    ],
    'indexes' => [],
    'primary key' => ['migration_id'],
  ];

  return $schema;
}

/**
 * Implements hook_update_N().
 *
 * Adds migration fingerprint columns to the migration flags table.
 */
function acquia_migrate_update_9100() {
  $fingerprint_schemas = [
    'last_computed_fingerprint' => [
      'type' => 'varchar_ascii',
      'length' => 64,
      'not null' => TRUE,
      'default' => MigrationFingerprinter::FINGERPRINT_NOT_COMPUTED,
      'description' => 'Last computed fingerprint.',
    ],
    'last_import_fingerprint' => [
      'type' => 'varchar_ascii',
      'length' => 64,
      'not null' => TRUE,
      'default' => MigrationFingerprinter::FINGERPRINT_NOT_COMPUTED,
      'description' => 'Last import fingerprint.',
    ],
  ];

  /** @var \Drupal\Core\Database\Schema $spec **/
  $schema = Database::getConnection()->schema();

  foreach ($fingerprint_schemas as $field_name => $spec) {
    $schema->addField('acquia_migrate_migration_flags', $field_name, $spec);
  }
}

/**
 * Rollback support is now computed at construction time and hence cached.
 *
 * @see \Drupal\acquia_migrate\Migration::__construct()
 * @see \Drupal\acquia_migrate\MigrationRepository::getMigrations
 */
function acquia_migrate_update_9101() {
}

/**
 * MacGyver support added a new route.
 *
 * @see \Drupal\acquia_migrate\Controller\HttpApi::migrationDatabaseCopy()
 */
function acquia_migrate_update_9201() {
  \Drupal::service('router.builder')->rebuild();
}

/**
 * Implements hook_update_N().
 *
 * Adds new column to the rollback state table and renames 'field_name' column
 * to 'component'.
 */
function acquia_migrate_update_9202() {
  $schema = Database::getConnection()->schema();

  // Install Migrate Magician Rollbackables.
  $module_list = \Drupal::service('extension.list.module')->getList();
  if (!in_array('migmag_rollbackable_replace', array_keys($module_list), TRUE)) {
    throw new UpdateException(
      'Migrate Magician Rollbackable Destination Plugins (migmag_rollbackable) cannot be found. Make sure the module is available and try again.'
    );
  }

  if (!\Drupal::moduleHandler()->moduleExists('migmag_rollbackable_replace')) {
    $module_installer = \Drupal::service('module_installer');
    assert($module_installer instanceof ModuleInstallerInterface);
    $module_installer->install(['migmag_rollbackable_replace'], TRUE);
  }

  // We are about to change legacy AMA rollback tables to the structure what
  // 'migmag_rollbackable' just installed, so we have to delete the migmag's
  // rollback tables.
  $schema->dropTable('migmag_rollbackable_new_targets');
  $schema->dropTable('migmag_rollbackable_data');

  // Add component name column to the rollback state table.
  $schema = Database::getConnection()->schema();
  $schema->addField(
    'acquia_migrate_config_new',
    'component',
    [
      'type' => 'varchar_ascii',
      'length' => 192,
      'not null' => TRUE,
      'default' => '',
      'description' => 'The name of the component, if any',
    ]
  );
  $schema->dropPrimaryKey('acquia_migrate_config_new');
  // Rename config ID to target ID.
  $schema->changeField(
    'acquia_migrate_config_new',
    'config_id',
    'target_id',
    [
      'type' => 'varchar_ascii',
      'length' => 192,
      'not null' => TRUE,
      'description' => 'The ID of the configuration',
    ],
    [
      'primary key' => [
        'target_id',
        'langcode',
        'component',
      ],
    ]
  );

  // Rename 'field_name' column to 'component'.
  $schema->dropPrimaryKey('acquia_migrate_config_rollback_data');
  $schema->changeField(
    'acquia_migrate_config_rollback_data',
    'field_name',
    'component',
    [
      'type' => 'varchar_ascii',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
      'description' => 'The name of the component',
    ]
  );
  // Rename config ID to target ID.
  $schema->changeField(
    'acquia_migrate_config_rollback_data',
    'config_id',
    'target_id',
    [
      'type' => 'varchar_ascii',
      'length' => 255,
      'not null' => TRUE,
      'description' => 'The ID of the configuration',
    ],
    [
      'primary key' => [
        'migration_plugin_id',
        'target_id',
        'langcode',
        'component',
      ],
    ]
  );

  // And now, rename the tables.
  $schema = Database::getConnection()->schema();
  $schema->renameTable('acquia_migrate_config_new', 'migmag_rollbackable_new_targets');
  $schema->renameTable('acquia_migrate_config_rollback_data', 'migmag_rollbackable_data');
}

/**
 * Migration Previewer service needs an extra argument.
 *
 * @see \Drupal\acquia_migrate\MigrationPreviewer::__construct()
 */
function acquia_migrate_update_9203() {
}

/**
 * Adds new index to the centralized messages table to improve performance.
 */
function acquia_migrate_update_9204() {
  $schema = Database::getConnection()->schema();
  $schema->addIndex(
    SqlWithCentralizedMessageStorage::CENTRALIZED_MESSAGE_TABLE,
    'faster_migrations',
    [
      SqlWithCentralizedMessageStorage::COLUMN_MIGRATION_PLUGIN_ID,
      SqlWithCentralizedMessageStorage::SOURCE_IDS_HASH,
    ],
    [
      'fields' => [
        'msgid' => [
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        SqlWithCentralizedMessageStorage::COLUMN_MIGRATION_PLUGIN_ID => [
          'type' => 'varchar',
          'length' => '128',
          'not null' => TRUE,
          'description' => 'The migration plugin ID.',
        ],
        SqlWithCentralizedMessageStorage::SOURCE_IDS_HASH => [
          'type' => 'varchar',
          'length' => '64',
          'not null' => TRUE,
          'description' => 'Hash of source IDs.',
        ],
      ],
      'indexes' => [
        SqlWithCentralizedMessageStorage::COLUMN_MIGRATION_PLUGIN_ID => [SqlWithCentralizedMessageStorage::COLUMN_MIGRATION_PLUGIN_ID],
      ],
    ]
  );
}

/**
 * Implements hook_update_N().
 *
 * Installs migmag_process for paragraphs migrations.
 */
function acquia_migrate_update_9205() {
  $module_handler = \Drupal::moduleHandler();
  // Install Migrate Magician Process Plugins if Paragraphs module is installed.
  if ($module_handler->moduleExists('paragraphs')) {
    $module_list = \Drupal::service('extension.list.module')->getList();
    if (!in_array('migmag_process', array_keys($module_list), TRUE)) {
      throw new UpdateException(
        'Migrate Magician Process Plugins (migmag_process) module is required if Paragraphs is installed. Make sure the module is available and try again.'
      );
    }

    if (!$module_handler->moduleExists('migmag_process')) {
      $module_installer = \Drupal::service('module_installer');
      assert($module_installer instanceof ModuleInstallerInterface);
      $module_installer->install(['migmag_process'], TRUE);
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Installs migmag_process_lookup_replace, succeeds AcquiaMigrateMigrateStub.
 */
function acquia_migrate_update_9206() {
  $module_handler = \Drupal::moduleHandler();
  $module_list = \Drupal::service('extension.list.module')->getList();
  if (!in_array('migmag_process_lookup_replace', array_keys($module_list), TRUE)) {
    throw new UpdateException(
      'Migrate Magician Forced Lookup Process Plugin (migmag_process_lookup_replace) module is required for AMA. Make sure the module is available and try again.'
    );
  }

  if (!$module_handler->moduleExists('migmag_process_lookup_replace')) {
    $module_installer = \Drupal::service('module_installer');
    assert($module_installer instanceof ModuleInstallerInterface);
    $module_installer->install(['migmag_process_lookup_replace'], TRUE);
  }
}
